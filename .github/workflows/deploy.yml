name: Deploy Liberation Platform

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: greenfieldoverride/liberation-platform

jobs:
  # Test and build
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run lint || echo "Linting skipped - no lint script found"

      - name: Run type checking
        run: pnpm run build

      - name: Run tests
        run: pnpm run test || echo "Tests skipped - no test script found"

  # Build and push Docker image
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DEPLOYMENT_TARGET=docker

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_OUTPUT

  # Deploy to Hetzner VPS
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    environment: 
      name: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/production' && 'https://thegreenfieldoverride.com' || 'https://staging.thegreenfieldoverride.com' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          HOST: ${{ secrets.HETZNER_HOST }}
          USER: ${{ secrets.HETZNER_USER }}
          IMAGE: ${{ needs.build.outputs.image }}
          ENVIRONMENT: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}
        run: |
          ssh $USER@$HOST << 'EOF'
            set -e
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull new image
            docker pull ${{ needs.build.outputs.image }}
            
            # Stop existing container
            docker stop liberation-platform-${{ env.ENVIRONMENT }} || true
            docker rm liberation-platform-${{ env.ENVIRONMENT }} || true
            
            # Start new container
            docker run -d \
              --name liberation-platform-${{ env.ENVIRONMENT }} \
              --restart unless-stopped \
              -p ${{ env.ENVIRONMENT == 'production' && '3000:3000' || '3001:3000' }} \
              -e NODE_ENV=production \
              -e ENVIRONMENT=${{ env.ENVIRONMENT }} \
              --health-cmd="node healthcheck.js" \
              --health-interval=30s \
              --health-timeout=3s \
              --health-retries=3 \
              ${{ needs.build.outputs.image }}
            
            # Clean up old images
            docker image prune -f
          EOF

      - name: Verify deployment
        env:
          HOST: ${{ secrets.HETZNER_HOST }}
          PORT: ${{ github.ref == 'refs/heads/production' && '3000' || '3001' }}
        run: |
          sleep 30
          curl -f http://${{ env.HOST }}:${{ env.PORT }}/api/health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful to ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}"
          else
            echo "❌ Deployment failed"
            exit 1
          fi