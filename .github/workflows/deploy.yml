name: üöÄ Liberation Platform Deploy

on:
  # Auto deploy main to staging
  push:
    branches: [main]
    
  # Manual deployment to any environment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options: 
          - staging
          - production
        default: staging
      git_ref:
        description: 'Git ref to deploy (branch, tag, or commit SHA)'
        required: true
        default: main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: greenfieldoverride/liberation-platform

jobs:
  # Test and validate
  test:
    name: üß™ Test & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_ref || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run lint || echo "‚ö†Ô∏è Linting skipped - no lint script found"

      - name: Run type checking & build
        run: pnpm run build

      - name: Run tests
        run: pnpm run test || echo "‚ö†Ô∏è Tests skipped - no test script found"

  # Deploy to specified environment
  deploy:
    name: üöÄ Deploy to ${{ github.event.inputs.environment || 'staging' }}
    needs: [test]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: ${{ github.event.inputs.environment == 'production' && 'https://greenfieldoverride.com' || 'https://staging.greenfieldoverride.com' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_ref || github.sha }}

      - name: Set deployment variables
        run: |
          if [ "${{ github.event.inputs.environment || 'staging' }}" = "production" ]; then
            echo "DEPLOY_PORT=3000" >> $GITHUB_ENV
            echo "CONTAINER_NAME=liberation-platform-production" >> $GITHUB_ENV
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "DEPLOY_PORT=3001" >> $GITHUB_ENV
            echo "CONTAINER_NAME=liberation-platform-staging" >> $GITHUB_ENV
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.HETZNER_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Liberation Platform
        env:
          HOST: ${{ secrets.HETZNER_HOST }}
          USER: ${{ secrets.HETZNER_USER }}
          GIT_REF: ${{ github.event.inputs.git_ref || github.sha }}
        run: |
          ssh $USER@$HOST << EOF
            set -e
            
            echo "üöÄ Starting deployment to ${{ env.ENVIRONMENT }}..."
            echo "üì¶ Deploying ref: ${{ env.GIT_REF }}"
            
            # Create deployment directory
            sudo mkdir -p /opt/liberation-platform
            sudo chown deploy-bot:deploy-bot /opt/liberation-platform
            cd /opt/liberation-platform
            
            # Update code to specific ref
            if [ -d ".git" ]; then
              echo "üì• Fetching latest code..."
              git fetch origin
              git checkout ${{ env.GIT_REF }}
              git pull origin ${{ env.GIT_REF }} || true
            else
              echo "üì• Cloning repository..."
              rm -rf * .* 2>/dev/null || true
              git clone https://github.com/thegreenfieldoverride/liberation-platform.git .
              git checkout ${{ env.GIT_REF }}
            fi
            
            echo "üèóÔ∏è Building Docker image..."
            docker build -t liberation-platform:${{ env.ENVIRONMENT }}-latest \
              --build-arg DEPLOYMENT_TARGET=docker \
              --build-arg ENVIRONMENT=${{ env.ENVIRONMENT }} \
              .
            
            echo "üîÑ Updating container..."
            # Stop and remove existing container
            docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            
            # Start new container
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              -p ${{ env.DEPLOY_PORT }}:3000 \
              -e NODE_ENV=production \
              -e ENVIRONMENT=${{ env.ENVIRONMENT }} \
              --health-cmd="node healthcheck.js" \
              --health-interval=30s \
              --health-timeout=3s \
              --health-retries=3 \
              liberation-platform:${{ env.ENVIRONMENT }}-latest
            
            echo "üßπ Cleaning up old images..."
            # Keep current and previous image, remove older ones
            docker images liberation-platform --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | grep -v REPOSITORY | sort -k2 -r | tail -n +3 | awk '{print $1}' | xargs -r docker rmi || true
            
            echo "‚úÖ Deployment to ${{ env.ENVIRONMENT }} complete!"
          EOF

      - name: Verify deployment health
        run: |
          echo "üîç Waiting for container to be healthy..."
          sleep 30
          
          for i in {1..10}; do
            if curl -f -s http://${{ secrets.HETZNER_HOST }}:${{ env.DEPLOY_PORT }}/api/health; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚è≥ Attempt $i/10: Health check failed, retrying in 10s..."
              if [ $i -eq 10 ]; then
                echo "‚ùå Health check failed after 10 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ SUCCESS: Liberation Platform deployed to ${{ env.ENVIRONMENT }}!"
            echo "üåç URL: ${{ github.event.inputs.environment == 'production' && 'https://greenfieldoverride.com' || 'https://staging.greenfieldoverride.com' }}"
            echo "üì¶ Git ref: ${{ github.event.inputs.git_ref || github.sha }}"
            echo "üèÉ‚Äç‚ôÇÔ∏è Triggered by: ${{ github.actor }}"
          else
            echo "üí• FAILED: Deployment to ${{ env.ENVIRONMENT }} failed"
            echo "üîç Check logs above for details"
            exit 1
          fi